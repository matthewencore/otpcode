package otp.task.service.telegram;


import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import otp.task.utils.OtpGenerator;

import java.util.ArrayList;
import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class OtpTelegramBot extends TelegramLongPollingBot {


    private final OtpGenerator otpGenerator;

    @Value("${telegrambots.bots[0].token}")
    private String token;

    @Value("${telegrambots.bots[0].username}")
    private String username;

    @Override
    public String getBotUsername() {
        return username;
    }

    @Override
    public String getBotToken() {
        return token;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            String messageText = update.getMessage().getText();

            switch (messageText.toLowerCase()) {
                case "/start" -> sendMessage(chatId, "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /getid, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π Chat ID.");
                case "/getid" -> sendMessage(chatId, "üîê –í–∞—à –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ —Ç–µ–ª–µ–≥—Ä–∞–º: `" + chatId + "`");
                default -> sendMessage(chatId, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
            }

        }

    }

    public void sendTextMessage(String chatId, String text, String username) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.enableMarkdown(true);

        message.setChatId(chatId);

        StringBuilder sb = new StringBuilder();
        sb.append("üîê *–í–∞—à –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –≤–µ–±-–∫–ª–∏–µ–Ω—Ç–µ:*\n")
                .append("`\n").append(text).append("\n`\n\n")
                .append("‚ö†Ô∏è _–ö–ª—é—á –¥–µ–π—Å—Ç–≤—É–µ—Ç 5 –º–∏–Ω—É—Ç._ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–Ω *–ø—Ä–æ—Å—Ä–æ—á–∏—Ç—Å—è*, –∏ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π.\n\n")
                .append("üë§ *–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n")
                .append("`").append(username).append("`\n\n")
                .append("–ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∏ –Ω–µ –≤—ã ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /dellink");

        message.setText(sb.toString());

        try {
            execute(message); // –ú–µ—Ç–æ–¥ –∏–∑ TelegramLongPollingBot\
        } catch (TelegramApiException ex) {
            if (ex.getMessage().contains("chat not found")) {
                // –î–æ–ø. –ª–æ–≥–∏–∫–∞: –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–Ω–æ–≤–∞ –≤–≤–µ—Å—Ç–∏ chatId

                log.warn("üîç –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. chatId : [{}]", chatId);

                // –º–æ–∂–Ω–æ –∫–∏–Ω—É—Ç—å custom exception –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
                throw new BadChatIDTelegram(String.format("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. chatId = %s", chatId));
            }
        }
    }


    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    @PostConstruct
    public void initCommands() {
        try {
            List<BotCommand> commandList = new ArrayList<>();
            commandList.add(new BotCommand("/start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"));
            commandList.add(new BotCommand("/getid", "–ü–æ–ª—É—á–∏—Ç—å id —á–∞—Ç–∞"));
            commandList.add(new BotCommand("/delid", "–ü–æ–ª—É—á–∏—Ç—å id —á–∞—Ç–∞"));

            execute(new SetMyCommands(commandList, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞", e);
        }
    }



    public void sendMessage(Long chatId, String text) {
        SendMessage msg = new SendMessage(String.valueOf(chatId), text);
        msg.enableMarkdown(true);
        try {
            execute(msg);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage());
        }
    }
}
